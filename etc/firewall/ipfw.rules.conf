##########################################################################
#
# DMS
# Network Operations, noc@foo.bar.net, http://www.foo.bar.net
#
# IPFW for DMS FreeBSD Overseas DNS Server
#
# These rules can be reloaded with out rebooting by issuing this command:
# sh /etc/ipfw.rules.conf
#
##########################################################################

# set rules command prefix
cmd="ipfw -q add"

# Do some sensible things....
setup_loopback () {
        ############
        # Only in rare cases do you want to change these rules
        #
        ${cmd} 001 pass all from any to any via lo0
        ${cmd} 002 deny all from any to 127.0.0.0/8
        ${cmd} 003 deny ip from 127.0.0.0/8 to any
        #if [ $ipv6_available -eq 0 ]; then
                ${cmd} 004 deny all from any to ::1
                ${cmd} 005 deny all from ::1 to any
        #fi
}

setup_ipv6_mandatory () {
        #[ $ipv6_available -eq 0 ] || return 0

}

. /etc/rc.subr
. /etc/network.subr
afexists inet6
ipv6_available=$?

pif="em0"
p6if="gif0"

# flush out the list before we begin
ipfw -q -f flush


# $cmd 00005 allow log ip6 from me6 to any
# Only reassemble IPv4 traffic!
$cmd 00010 reass ip4 from any to any in via $pif

$cmd 00015 skipto 10000 ip6 from any to any via gif0

$cmd 000020 allow ip4 from 66.220.18.42 to me proto ipv6 in via $pif
$cmd 000021 allow ip4 from me to 66.220.18.42 proto ipv6 out via $pif


# no restriction on loopback interface IPv4
$cmd 00030 allow all from any to any via lo0
$cmd 00031 deny  all from any to 127.0.0.0/8 
$cmd 00032 deny ip from 127.0.0.0/8 to any

############
# Only in rare cases do you want to change these rules
#
# ND
#
# DAD
${cmd} 00040 pass ipv6-icmp from :: to ff02::/16
# RS, RA, NS, NA, redirect...
${cmd} 00041 pass ipv6-icmp from fe80::/10 to fe80::/10
${cmd} 00042 pass ipv6-icmp from fe80::/10 to ff02::/16

# Allow ICMPv6 destination unreach
${cmd} 00043 pass ipv6-icmp from any to any icmp6types 1

# Allow NS/NA/toobig (don't filter it out)
${cmd} 00044 pass ipv6-icmp from any to any icmp6types 2,135,136

# Allow 3, 4 and echo request/reply to happen
${cmd} 00045 pass ipv6-icmp from any to any icmp6types 1,3,4,128,129 via $pif

# allow the following icmp control traffic
#  - echo reply (0)
#  - destination unreachable (3)
#  - source quench (4)
#  - echo request (8)
#  - time exceeded (11)
$cmd 00060 allow icmp from any to any icmptypes 0,3,4,8,11 via $pif

## IPv4 IPSEC transport configuration
#$cmd 00100 allow udp from 203.79.116.183 500 to me 500 in via $pif
#$cmd 00101 allow udp from me 500 to 203.79.116.183 500 out via $pif
#$cmd 00120 allow esp from me to 203.79.116.183 out via $pif
#$cmd 00121 allow esp from 203.79.116.183 to me in via $pif
#
#$cmd 00190 check-state ipsec
#
#$cmd 00200 allow udp from 203.79.116.183 to me 53  in ipsec via $pif keep-state
#$cmd 00210 allow tcp from 203.79.116.183 to me 53  in ipsec via $pif keep-state
#
#$cmd 00220 allow ip4 from me to 203.79.116.183 out keep-state
#
#$cmd 00290 deny log ip from 203.79.116.183 to me in via $pif
#$cmd 00291 deny log ip from me to 203.79.116.183 out via $pif

# allow udp and tcp packets to and from name server; stateless
# rules used to prevent to possible overflow of state table.
$cmd 00300 allow udp from any to me 53 in via $pif
$cmd 00301 allow udp from me 53 to any out via $pif
$cmd 00302 allow tcp from any to me 53 in via $pif
$cmd 00303 allow tcp from me 53 to any out via $pif

# allow the packet through if it has previously been added to the
# the dynamic rules table by a allow keep-state statement.
$cmd 00400 check-state

# allow all traffic we initiate out
$cmd 00700 allow all from me to any out via $pif keep-state

# allow ssh access from engineers workstation network (rule is persistent set 31)
# check if rule is already loaded, before loading again (prevents duplicate rules)
ipfw show 08000 > /dev/null 2>&1
if [ $? != "0" ] ; then
  $cmd 08000 set 31 allow tcp from 210.55.30.56 to me 22 in via $pif setup keep-state
fi

ipfw show 08010 > /dev/null 2>&1
if [ $? != "0" ] ; then
  $cmd 08010 set 31 allow tcp from 203.79.116.183 to me 22 in via $pif setup keep-state
fi

# deny and log all other packets that fell through to see what they are
$cmd 09998 deny log ip4 from any to any
$cmd 09999 deny log ip6 from any to any

# Tunnel traffic - IPv6 only
############
# Only in rare cases do you want to change these rules
#
# ND
#
# DAD
${cmd} 10010 pass ipv6-icmp from :: to ff02::/16
# RS, RA, NS, NA, redirect...
${cmd} 10011 pass ipv6-icmp from fe80::/10 to fe80::/10
${cmd} 10012 pass ipv6-icmp from fe80::/10 to ff02::/16

# Allow ICMPv6 destination unreach
${cmd} 10013 pass ipv6-icmp from any to any icmp6types 1

# Allow NS/NA/toobig (don't filter it out)
${cmd} 10024 pass ipv6-icmp from any to any icmp6types 2,135,136

# Allow 3, 4 and echo request/reply to happen
${cmd} 10025 pass ipv6-icmp from any to any icmp6types 1,3,4,128,129 via $p6if
# IPv6 for above

# IPSEC tunnel traffic

$cmd 10100 allow udp from 2001:470:f012:2::2 500 to me6 500 in via $p6if
$cmd 10101 allow udp from me6 500 to 2001:470:f012:2::2 500 out via $p6if
$cmd 10120 allow esp from me6 to 2001:470:f012:2::2 out via $p6if
$cmd 10121 allow esp from 2001:470:f012:2::2 to me6 in via $p6if

# Disable filtering of incoming IPSEC as it is not needed on client.
#$cmd 10180 check-state
#$cmd 10200 allow udp from 2001:470:f012:2::2 to me6 53  in ipsec via $p6if keep-state
#$cmd 10210 allow tcp from 2001:470:f012:2::2 to me6 53  in ipsec via $p6if keep-state
#
#$cmd 10220 allow ip6 from me6 to 2001:470:f012:2::2 out keep-state
#
#$cmd 10290 deny log ip from 2001:470:f012:2::2 to me6 in via $p6if
#$cmd 10291 deny log ip from me6 to 2001:470:f012:2::2 out via $p6if

# Internet name server access
$cmd 10300 allow udp from any to me6 53 in via $p6if
$cmd 10301 allow udp from me6 53 to any out via $p6if
$cmd 10302 allow tcp from any to me6 53 in via $p6if
$cmd 10303 allow tcp from me6 53 to any out via $p6if

# allow the packet through if it has previously been added to the
# the dynamic rules table by a allow keep-state statement.
$cmd 10400 check-state

# allow all traffic we initiate out
$cmd 10700 allow all from me6 to any out via $p6if keep-state

# allow access from home to server
ipfw show 18020 > /dev/null 2>&1
if [ $? != "0" ] ; then
  $cmd 18020 set 31 allow tcp from 2001:470:f012:1::/64 to me6 22 in via $p6if setup keep-state
fi

$cmd 20000 deny log ip6 from any to any
